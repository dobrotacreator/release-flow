name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          # detect pnpm first, then yarn, then npm (package.json fallback)
          if [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=pnpm exec" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # allow setup-node to handle caching for the detected manager (npm / yarn / pnpm)
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup pnpm (official action)
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # Ensure pnpm is available via corepack if we're using pnpm
      - name: Enable corepack & pnpm (if pnpm)
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm -v

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # include pnpm-lock.yaml in key so cache busts correctly for pnpm
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: |
          # run the detected manager command (for pnpm use --frozen-lockfile)
          if [ "${{ steps.detect-package-manager.outputs.manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          elif [ "${{ steps.detect-package-manager.outputs.manager }}" = "yarn" ]; then
            yarn install
          else
            npm ci
          fi

      - name: Build with Next.js
        run: |
          # If you want a static export into ./out, run both build and export.
          # Using the detected runner to execute next commands:
          if [ "${{ steps.detect-package-manager.outputs.manager }}" = "pnpm" ]; then
            pnpm exec next build
            pnpm exec next export
          elif [ "${{ steps.detect-package-manager.outputs.manager }}" = "yarn" ]; then
            yarn next build
            yarn next export
          else
            npx --no-install next build
            npx --no-install next export
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
